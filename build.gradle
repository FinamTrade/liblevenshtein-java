buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.+'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.+'
    classpath 'org.standardout:gradle-versioneye-plugin:1.+'
  }
}

plugins {

  // Supported Plugins
  // ---------------------------------------------------------------------------

  id 'checkstyle'
  id 'findbugs'
  id 'jacoco'
  id 'java'
  id 'jdepend'
  id 'maven-publish'
  id 'pmd'

  // Third Party Plugins
  // ---------------------------------------------------------------------------

  // Checks unit test coverage
  id 'com.github.kt3k.coveralls' version '2.6.3'
}

apply plugin: 'com.google.protobuf'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.standardout.versioneye'

repositories {
  mavenCentral()
  jcenter()
}

group = 'com.github.universal-automata'
archivesBaseName = name
version = '3.0.0-alpha.1' // http://semver.org/

description = 'A library for spelling-correction based on Levenshtein Automata.'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
  srcJava = "$projectDir/src/main/java"
  srcDelomboked = "$buildDir/src-delomboked/main/java"

  githubOrg = 'universal-automata'
  githubRepo = "liblevenshtein-java"
  gitUri = "git@github.com:${githubOrg}/${githubRepo}.git"
  vcsUrl = "https://github.com/${githubOrg}/${githubRepo}.git"
  gitBranch = "master"
  //gitBranch = version
  projectUrl = "https://github.com/${githubOrg}/${githubRepo}/"
  issuesUrl = "${projectUrl}/issues"
  projectAuthor = 'Dylon Edwards'
  authorUsername = 'dylon'
  authorEmail = "dylon.devo+${githubRepo}@gmail.com"
  demoUrl = "http://${githubOrg}.github.io/${rootProject.name}/"

  wikidocDir = file("${projectDir}/gh-pages/docs/wiki/${version}")
  latestWikidocDir = file("${projectDir}/gh-pages/docs/wiki/latest")

  isReleaseVersion = version ==~ /^\d+\.\d+\.\d+$/
  isDevelopmentVersion = !isReleaseVersion
}

configurations {
  shell
}

sourceSets {
  task
}

findbugs {
  excludeFilter = file("${rootProject.projectDir}/config/findbugs/exclude-filter.xml")
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:3.0.0-beta-2"
  }
}

dependencies {
  compile 'com.google.code.findbugs:annotations:3.+'
  compile 'com.google.guava:guava:19.+'
  compile 'com.google.protobuf:protobuf-java-util:3.+'
  compile 'com.google.protobuf:protobuf-java:3.+'
  compile 'it.unimi.dsi:fastutil:7.+'
  compile 'org.apache.commons:commons-lang3:3.+'
  compile 'org.projectlombok:lombok:1.+'
  compile 'org.slf4j:slf4j-api:1.+'

  taskCompile 'com.google.code.findbugs:annotations:3.+'
  taskCompile 'com.google.guava:guava:19.+'
  taskCompile 'commons-cli:commons-cli:1.+'
  taskCompile 'commons-io:commons-io:2.+'
  taskCompile 'org.antlr:ST4:4.+'
  taskCompile 'org.projectlombok:lombok:1.+'
  taskCompile 'org.slf4j:slf4j-api:1.+'

  taskRuntime 'ch.qos.logback:logback-classic:1.+'
  taskRuntime 'org.codehaus.groovy:groovy-all:2.+'
  taskRuntime 'org.slf4j:jcl-over-slf4j:1.+'
  taskRuntime 'org.slf4j:jul-to-slf4j:1.+'
  taskRuntime 'org.slf4j:log4j-over-slf4j:1.+'
  taskRuntime 'org.slf4j:osgi-over-slf4j:1.+'

  testCompile 'com.google.jimfs:jimfs:1.+'
  testCompile 'org.assertj:assertj-core:3.+'
  testCompile 'org.mockito:mockito-all:1.+'
  testCompile 'org.testng:testng:6.+'

  testRuntime 'ch.qos.logback:logback-classic:1.+'
  testRuntime 'org.codehaus.groovy:groovy-all:2.+'
  testRuntime 'org.slf4j:jcl-over-slf4j:1.+'
  testRuntime 'org.slf4j:jul-to-slf4j:1.+'
  testRuntime 'org.slf4j:log4j-over-slf4j:1.+'
  testRuntime 'org.slf4j:osgi-over-slf4j:1.+'

  // JaCoCo (Plugin)
  jacocoAgent 'org.jacoco:org.jacoco.agent:0.+'
  jacocoAnt 'org.jacoco:org.jacoco.ant:0.+'

  // Checkstyle (Plugin)
  checkstyle 'com.puppycrawl.tools:checkstyle:6.+'

  shell 'commons-cli:commons-cli:1.+'
  shell('jline:jline:2.+') {
    exclude(group: 'junit', module: 'junit')
  }
  shell 'org.codehaus.groovy:groovy-groovysh:2.+'
}

jacocoTestReport {
  reports {
    xml.enabled = true // coveralls plugin depends on xml format report
    html.enabled = true
  }
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(
        dir: it,
        exclude: [
          '**/LibLevenshteinProtos*'
        ]
      )
    })
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:all"
}

test {
  useTestNG() {
    // Run as many tests in-parallel as there are CPU cores
    parallel 'methods'
    threadCount Runtime.runtime.availableProcessors()
  }

  testLogging {
    //events "passed", "skipped", "failed"
    events "skipped", "failed"
    exceptionFormat "full"
    showStandardStreams true
    showExceptions true
    showStackTraces true
  }
}

def exec(classpath, mainClass, args=[]) {
  def command = [
    'java',
    '-cp', classpath.asPath,
    mainClass
  ] + args

  def proc = new ProcessBuilder(command).inheritIO().start()
  proc.waitFor()

  if (0 != proc.exitValue()) {
    throw new RuntimeException("shell exited with status: ${proc.exitValue()}")
  }
}

def execTask(mainClass, args=[]) {
  def classpath = configurations.taskRuntime
  classpath += files(sourceSets.task.output.classesDir)
  classpath += files(sourceSets.task.output.resourcesDir)
  exec(classpath, mainClass, args + [
    '--group-id', rootProject.group,
    '--artifact-id', rootProject.name,
    '--version', rootProject.version,
    '--gradle-version', gradle.gradleVersion,
    '--java-source-version', sourceCompatibility.toString(),
    '--java-target-version', targetCompatibility.toString(),
    '--github-org', githubOrg.toString(),
    '--github-repo', githubRepo.toString(),
    '--git-uri', gitUri.toString(),
    '--git-branch', gitBranch.toString(),
    '--project-url', projectUrl.toString(),
    '--project-author', projectAuthor.toString(),
    '--author-username', authorUsername.toString(),
    '--author-email', authorEmail.toString(),
    '--demo-url', demoUrl.toString()
  ])
}

task printVersion {
  doLast {
    println("${rootProject.version}")
  }
}

task(shell, dependsOn: classes) {
  description =
    'Groovy repl with this project and all its dependencies on the $CLASSPATH'

  doLast {
    def classpath = configurations.shell
    classpath += files(sourceSets.task.output.classesDir)
    classpath += files(sourceSets.task.output.resourcesDir)
    sourceSets.each() {classpath += it.runtimeClasspath}
    exec(classpath, 'org.codehaus.groovy.tools.shell.Main', ['--color'])
  }
}

// create syntastic classpath files
task syntastic(dependsOn: taskClasses) {
  description = 'Dumps the classpaths a file that can be read by Syntastic.vim'
  doLast {
    def classpath = configurations.taskRuntime
    classpath += files(sourceSets.task.output.classesDir)
    classpath += files(sourceSets.task.output.resourcesDir)
    sourceSets.each() {classpath += it.runtimeClasspath}

    def configPath = "${projectDir}/.vimrc.local".toString()

    execTask('com.github.liblevenshtein.task.GenerateSyntasticConfig', [
      "--classpath", classpath.asPath,
      "--config-path", configPath
    ])
  }
}

task wikidoc(dependsOn: taskClasses) {
  description = 'Generates GitHub, wiki documentation'
  doFirst {
    if (wikidocDir.exists() && !wikidocDir.deleteDir()) {
      throw new IOException("Failed to delete wikidoc dir [${wikidocDir}]")
    }
    wikidocDir.mkdirs()
  }
  doLast {
    execTask('com.github.liblevenshtein.task.GenerateWikidoc', [
      "--wiki-path", wikidocDir.path
    ])
    copy {
      from wikidocDir
      into latestWikidocDir
    }
  }
}

task readme(dependsOn: taskClasses) {
  description = 'Keeps the README.md up-to-date'
  doLast {
    execTask('com.github.liblevenshtein.task.GenerateReadme', [
      "--readme-path", "$projectDir/README.md".toString()
    ])
  }
}

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

artifactory {
  contextUrl = 'https://oss.jfrog.org/artifactory'
  publish {
    repository {
      repoKey = 'oss-release-local'
      username = System.env['BINTRAY_USER']
      password = System.env['BINTRAY_API_KEY']
      maven = true
    }
    defaults {
      publications('mavenJava')
    }
  }
  resolve {
    repository {
      repoKey = 'libs-release'
      username = System.env['BINTRAY_USER']
      password = System.env['BINTRAY_API_KEY']
      maven = true
    }
  }
}

bintray {
  user = System.env['BINTRAY_USER']
  key = System.env['BINTRAY_API_KEY']
  publications = ['mavenJava']
  dryRun = rootProject.ext.isDevelopmentVersion
  publish = true
  pkg {
    userOrg = 'universal-automata'
    repo = 'liblevenshtein'
    name = 'liblevenshtein-java'
    desc = rootProject.description
    websiteUrl = rootProject.ext.projectUrl
    githubRepo = "${rootProject.ext.githubOrg}/${rootProject.ext.githubRepo}"
    githubReleaseNotesFile = 'CHANGELOG.md'
    issueTrackerUrl = rootProject.ext.issuesUrl
    licenses = ['MIT']
    vcsUrl = rootProject.ext.vcsUrl
    labels = [
      'approximate string matching',
      'automata',
      'computational biology',
      'computer science',
      'data science',
      'dawg',
      'dictionary',
      'distance measure',
      'distance metric',
      'edit distance',
      'finite state automata',
      'finite state automaton',
      'finite state transducer',
      'fuzzy search',
      'fuzzy searching',
      'genomics',
      'information retrieval',
      'levenshtein automata',
      'levenshtein distance',
      'maching learning',
      'mafsa',
      'search engine',
      'spelling correction',
      'transducer',
      'trie',
      'universal automata'
    ]
    publicDownloadNumbers = true
    version {
      desc = rootProject.description
      released = new Date()
      vcsTag = rootProject.version
      mavenCentralSync {
        sync = true
        user = System.env['SONATYPE_USERNAME']
        password = System.env['SONATYPE_PASSWORD']
        close = '1'
      }
    }
  }
}

def pomConfig = {
  licenses {
    license {
      name 'MIT License'
      url "https://raw.githubusercontent.com/${githubOrg}/${githubRepo}/master/LICENSE"
      distribution 'repo'
    }
  }
  developers {
    developer {
      id 'dylon'
      name 'Dylon Edwards'
      email "dylon.devo+${githubRepo}@gmail.com"
      url 'https://github.com/dylon'
    }
  }
  issueManagement {
    system 'GitHub Issues'
    url "${projectUrl}/issues"
  }
  scm {
    url projectUrl
    connection "scm:git:https://github.com/${githubOrg}/${githubRepo}.git"
    developerConnection "scm:git:git@github.com:${githubOrg}/${githubRepo}.git"
  }
}

task javadocJar(type: Jar, dependsOn: [javadoc, classes]) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from file(srcDelomboked)
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar

      pom.withXml {
        def root = asNode()
        root.appendNode('name', rootProject.name)
        root.appendNode('description', rootProject.description)
        root.appendNode('url', rootProject.ext.projectUrl)
        root.appendNode('inceptionYear', '2012')
        root.appendNode('packaging', 'jar')

        // Generate map of resolved versions
        Map resolvedVersionMap = [:]
        Set<ResolvedArtifact> resolvedArtifacts =
          configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
        resolvedArtifacts.addAll(
          configurations.testCompile.getResolvedConfiguration().getResolvedArtifacts())
        resolvedArtifacts.each {
          ModuleVersionIdentifier mvi = it.getModuleVersion().getId();
          resolvedVersionMap.put("${mvi.getGroup()}:${mvi.getName()}", mvi.getVersion())
        }

        // Update dependencies with resolved versions
        root.dependencies.first().each {
          def groupId = it.get("groupId").first().value().first()
          def artifactId = it.get("artifactId").first().value().first()
          it.get("version").first().value = resolvedVersionMap.get("${groupId}:${artifactId}")
        }

        root.children().last() + pomConfig
      }
    }
  }
}

task delombok {
  dependsOn configurations.compile.getTaskDependencyFromProjectDependency(true, "compileJava")

  // Make sure the delombok directory exists ...
  file(srcDelomboked).mkdirs()

  inputs.files file(srcJava)
  outputs.dir file(srcDelomboked)

  doLast {
    ant.taskdef(
      name: 'delombok',
      classname: 'lombok.delombok.ant.Tasks$Delombok',
      classpath: configurations.compile.asPath)
    ant.delombok(
      from: srcJava,
      to: srcDelomboked,
      classpath: configurations.compile.asPath)
  }
}

tasks.javadoc {
  dependsOn delombok
  source = new FileNameFinder().getFileNames("${buildDir}", '**/*.java')
  doFirst {
    destinationDir = file("${projectDir}/gh-pages/docs/javadoc/${version}")
    if (destinationDir.exists() && !destinationDir.deleteDir()) {
      throw new IOException("Failed to delete javadoc dir [${destinationDir}]")
    }
    destinationDir.mkdirs()
  }
  options.optionFiles << file('javadoc.options')
}

tasks.withType(Checkstyle) {
  reports {
    xml.enabled true
    html.enabled true
    html.stylesheet resources.text.fromFile('config/checkstyle/checkstyle.xsl')
  }
}

// vim: set ft=groovy ts=2 sw=2 et sta:
